{"ast":null,"code":"var _jsxFileName = \"/Users/joachimdemuth/Desktop/React/website2/src/routes/NftGallery.jsx\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { BallTriangle } from \"react-loader-spinner\";\nimport { continuedFetchNfts, fetchNfts } from \"../lib/Nfts\";\nimport { useEffect, useState } from \"react\";\nimport \"./NftGallery.css\";\nimport NftCard from \"../components/NftCard\";\nimport { all } from \"@tensorflow/tfjs\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction NftGallery() {\n  _s();\n  const [nftData, setNftData] = useState({\n    continuation: [{\n      0: \"Mg==\"\n    }],\n    hej: \"hjehehe\"\n  });\n  const [isLoading, setLoading] = useState(false);\n  const [cont, setCont] = useState(false);\n  const [contData, setContData] = useState({\n    continuation: [{\n      0: \"dsdsd\"\n    }]\n  });\n  const [allNfts, setAllNfts] = useState(null);\n  useEffect(() => {\n    fetchNfts().then(res => res.json()).then(data => {\n      // setNftData(data);\n      console.log(data);\n    });\n    const samlet = Object.assign(nftData, contData);\n    setAllNfts(samlet);\n    console.log(allNfts);\n\n    // setLoading(true);\n    // fetchNfts()\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     // setNftData(data);\n    //     console.log(nftData)\n\n    //     // if(cont === true) {\n    //     //   continuedFetchNfts()\n    //     //   .then((res) => res.json())\n    //     //   .then((data) => {\n    //     //     setContData(data)\n    //     //     setCont(false)\n    //     //     setLoading(false)\n    //     //   })\n    //     // }\n\n    //   });\n\n    // if(nftData.continuation === \"Mg==\") {\n    //   setCont(true)\n    //   console.log(cont)\n    //   continuedFetchNfts()\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     console.log(contData)\n    //     console.log(cont)\n    //   })\n    //   setAllNfts(Object.assign(nftData, contData))\n    //   console.log(allNfts)\n    //  } \n\n    //  if(cont) {\n\n    //     setAllNfts({...nftData,...contData})\n    //     console.log(allNfts)\n    //     setCont(false);\n\n    //  }\n  }, []);\n  if (isLoading) return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-spinner-container\",\n        children: /*#__PURE__*/_jsxDEV(BallTriangle, {\n          height: 100,\n          width: 100,\n          radius: 5,\n          color: \"blue\",\n          ariaLabel: \"ball-triangle-loading\",\n          wrapperClass: {},\n          wrapperStyle: \"\",\n          visible: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading-text-container\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Fetching NFTs for you..\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n  if (!nftData) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"No data available\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 24\n  }, this);\n  const nfts = nftData.nfts;\n  // const sortedNfts = nfts.filter((nft) => nft.metadata);\n\n  // console.log(sortedNfts)\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"NFT Gallery\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"nft-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n}\n_s(NftGallery, \"KoS1QAocE2DgU2C2/DheZXdkvpk=\");\n_c = NftGallery;\nexport default NftGallery;\nvar _c;\n$RefreshReg$(_c, \"NftGallery\");","map":{"version":3,"names":["React","BallTriangle","continuedFetchNfts","fetchNfts","useEffect","useState","NftCard","all","NftGallery","nftData","setNftData","continuation","hej","isLoading","setLoading","cont","setCont","contData","setContData","allNfts","setAllNfts","then","res","json","data","console","log","samlet","Object","assign","nfts"],"sources":["/Users/joachimdemuth/Desktop/React/website2/src/routes/NftGallery.jsx"],"sourcesContent":["import React from \"react\";\nimport { BallTriangle } from \"react-loader-spinner\";\nimport { continuedFetchNfts, fetchNfts } from \"../lib/Nfts\";\nimport { useEffect, useState } from \"react\";\nimport \"./NftGallery.css\";\nimport NftCard from \"../components/NftCard\";\nimport { all } from \"@tensorflow/tfjs\";\n\n\nfunction NftGallery() {\n  const [nftData, setNftData] = useState({continuation: [{0: \"Mg==\"},], hej: \"hjehehe\"});\n  const [isLoading, setLoading] = useState(false);\n  const [cont, setCont] = useState(false);\n  const [contData, setContData] = useState({continuation: [{0:\"dsdsd\"},]});\n  const [allNfts, setAllNfts] = useState(null)\n\n  useEffect(() => {\n    fetchNfts()\n      .then((res) => res.json())\n      .then((data) => {\n        // setNftData(data);\n        console.log(data)\n\n      })\n\n\n    const samlet = Object.assign(nftData,contData)\n   setAllNfts(samlet);\n    console.log(allNfts)\n\n\n\n\n\n    // setLoading(true);\n    // fetchNfts()\n    //   .then((res) => res.json())\n    //   .then((data) => {\n    //     // setNftData(data);\n    //     console.log(nftData)\n\n    //     // if(cont === true) {\n    //     //   continuedFetchNfts()\n    //     //   .then((res) => res.json())\n    //     //   .then((data) => {\n    //     //     setContData(data)\n    //     //     setCont(false)\n    //     //     setLoading(false)\n    //     //   })\n    //     // }\n\n    //   });\n\n      // if(nftData.continuation === \"Mg==\") {\n      //   setCont(true)\n      //   console.log(cont)\n      //   continuedFetchNfts()\n      //   .then((res) => res.json())\n      //   .then((data) => {\n      //     console.log(contData)\n      //     console.log(cont)\n      //   })\n      //   setAllNfts(Object.assign(nftData, contData))\n      //   console.log(allNfts)\n      //  } \n\n      //  if(cont) {\n       \n\n      //     setAllNfts({...nftData,...contData})\n      //     console.log(allNfts)\n      //     setCont(false);\n\n      //  }\n\n  }, []);\n\n  if (isLoading)\n    return (\n      <>\n        <div className=\"loading-container\">\n          <div className=\"loading-spinner-container\">\n            <BallTriangle\n              height={100}\n              width={100}\n              radius={5}\n              color=\"blue\"\n              ariaLabel=\"ball-triangle-loading\"\n              wrapperClass={{}}\n              wrapperStyle=\"\"\n              visible={true}\n            />\n          </div>\n          <div className=\"loading-text-container\">\n            <p>Fetching NFTs for you..</p>\n          </div>\n        </div>\n      </>\n    );\n  if (!nftData) return <p>No data available</p>;\n  const nfts = nftData.nfts;\n  // const sortedNfts = nfts.filter((nft) => nft.metadata);\n\n  // console.log(sortedNfts)\n\n  return (\n    <>\n      <div className=\"container\">\n        <h1>NFT Gallery</h1>\n        <div className=\"nft-container\">\n          {/* {sortedNfts.map((nft) => {\n            let str = nft.metadata.name;\n            let title = str.slice(0, -5);\n\n            let num = str.substring(str.length - 5);\n\n            return (\n              <NftCard\n                key={nft.mint_address}\n                url={nft.cached_file_url}\n                title={title}\n                desc={nft.metadata.description}\n                number={num}\n                link={nft.cached_file_url}\n              />\n              // <div key={nft.metadata_url} >\n              //     <img src={nft.cached_file_url} alt={nft.collection_id} />\n              // </div>\n            );\n          })} */}\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default NftGallery;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
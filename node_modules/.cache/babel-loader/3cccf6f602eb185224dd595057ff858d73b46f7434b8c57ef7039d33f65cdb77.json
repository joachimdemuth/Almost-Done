{"ast":null,"code":"export const fetchNfts = apiurl => {\n  fetchAllPages(apiurl);\n};\nconst addToken = (base, token) => {\n  const url = new URL(base);\n  const searchParams = new URLSearchParams(url.search);\n  searchParams.set(\"continuation\", token);\n  url.search = searchParams;\n  console.log(url.toString());\n  return url.toString();\n};\nconst fetchAllPages = url => {\n  fetch(url, {\n    headers: {\n      Authorization: process.env.REACT_APP_AUTH_CODE\n    }\n  }).then(res => res.json()).then(_ref => {\n    let {\n      items,\n      continuation: token\n    } = _ref;\n    return setTimeout(() => {\n      token ? fetchAllPages(addToken(url, token)).then(newItems => console.log(newItems)) : console.log(\"no token\");\n    });\n  }\n  // token ? fetchAllPages(addToken(url, token))\n  // .then((newItems) => console.log(newItems)) : console.log(\"no data\")\n  );\n\n  // token ? fetchAllPages(addToken(url, token)).then((newItems) => [\n  //     ...items,\n  //     ...newItems,\n  // ])\n  // : items\n  // );\n};\n\nexport const continuedFetchNfts = async () => {\n  return fetch(\"https://api.nftport.xyz/v0/solana/accounts/558acsgeuPDFQwdCTM8LWjgyiiZCPyoS9iXts1KAWRCW?include=metadata&continuation=Mg%3D%3D\", {\n    headers: {\n      Authorization: process.env.REACT_APP_AUTH_CODE\n    }\n  });\n};","map":{"version":3,"names":["fetchNfts","apiurl","fetchAllPages","addToken","base","token","url","URL","searchParams","URLSearchParams","search","set","console","log","toString","fetch","headers","Authorization","process","env","REACT_APP_AUTH_CODE","then","res","json","items","continuation","setTimeout","newItems","continuedFetchNfts"],"sources":["/Users/joachimdemuth/Desktop/React/website2/src/lib/Nfts.js"],"sourcesContent":["export const fetchNfts = (apiurl) => {\n  fetchAllPages(apiurl);\n};\n\nconst addToken = (base, token) => {\n  const url = new URL(base);\n  const searchParams = new URLSearchParams(url.search);\n  searchParams.set(\"continuation\", token);\n  url.search = searchParams;\n  console.log(url.toString());\n  return url.toString();\n};\n\nconst fetchAllPages = (url) => {\n  fetch(url, {\n    headers: {\n      Authorization: process.env.REACT_APP_AUTH_CODE,\n    },\n  })\n    .then((res) => res.json())\n    .then(\n      ({ items, continuation: token }) => setTimeout(() => {\n\n          token\n            ? fetchAllPages(addToken(url, token)).then((newItems) => console.log(newItems))\n            : console.log(\"no token\")\n      })\n      // token ? fetchAllPages(addToken(url, token))\n      // .then((newItems) => console.log(newItems)) : console.log(\"no data\")\n    );\n\n  // token ? fetchAllPages(addToken(url, token)).then((newItems) => [\n  //     ...items,\n  //     ...newItems,\n  // ])\n  // : items\n  // );\n};\n\nexport const continuedFetchNfts = async () => {\n  return fetch(\n    \"https://api.nftport.xyz/v0/solana/accounts/558acsgeuPDFQwdCTM8LWjgyiiZCPyoS9iXts1KAWRCW?include=metadata&continuation=Mg%3D%3D\",\n    {\n      headers: {\n        Authorization: process.env.REACT_APP_AUTH_CODE,\n      },\n    }\n  );\n};\n"],"mappings":"AAAA,OAAO,MAAMA,SAAS,GAAIC,MAAM,IAAK;EACnCC,aAAa,CAACD,MAAM,CAAC;AACvB,CAAC;AAED,MAAME,QAAQ,GAAG,CAACC,IAAI,EAAEC,KAAK,KAAK;EAChC,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACH,IAAI,CAAC;EACzB,MAAMI,YAAY,GAAG,IAAIC,eAAe,CAACH,GAAG,CAACI,MAAM,CAAC;EACpDF,YAAY,CAACG,GAAG,CAAC,cAAc,EAAEN,KAAK,CAAC;EACvCC,GAAG,CAACI,MAAM,GAAGF,YAAY;EACzBI,OAAO,CAACC,GAAG,CAACP,GAAG,CAACQ,QAAQ,EAAE,CAAC;EAC3B,OAAOR,GAAG,CAACQ,QAAQ,EAAE;AACvB,CAAC;AAED,MAAMZ,aAAa,GAAII,GAAG,IAAK;EAC7BS,KAAK,CAACT,GAAG,EAAE;IACTU,OAAO,EAAE;MACPC,aAAa,EAAEC,OAAO,CAACC,GAAG,CAACC;IAC7B;EACF,CAAC,CAAC,CACCC,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAE,CAAC,CACzBF,IAAI,CACH;IAAA,IAAC;MAAEG,KAAK;MAAEC,YAAY,EAAEpB;IAAM,CAAC;IAAA,OAAKqB,UAAU,CAAC,MAAM;MAEjDrB,KAAK,GACDH,aAAa,CAACC,QAAQ,CAACG,GAAG,EAAED,KAAK,CAAC,CAAC,CAACgB,IAAI,CAAEM,QAAQ,IAAKf,OAAO,CAACC,GAAG,CAACc,QAAQ,CAAC,CAAC,GAC7Ef,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IAC/B,CAAC,CAAC;EAAA;EACF;EACA;EAAA,CACD;;EAEH;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;;AAED,OAAO,MAAMe,kBAAkB,GAAG,YAAY;EAC5C,OAAOb,KAAK,CACV,gIAAgI,EAChI;IACEC,OAAO,EAAE;MACPC,aAAa,EAAEC,OAAO,CAACC,GAAG,CAACC;IAC7B;EACF,CAAC,CACF;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}